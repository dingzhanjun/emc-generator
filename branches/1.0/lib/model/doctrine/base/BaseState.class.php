<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('State', 'doctrine');

/**
 * BaseState
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $code
 * @property string $country_code
 * @property string $name
 * @property Country $Country
 * 
 * @method string  getCode()         Returns the current record's "code" value
 * @method string  getCountryCode()  Returns the current record's "country_code" value
 * @method string  getName()         Returns the current record's "name" value
 * @method Country getCountry()      Returns the current record's "Country" value
 * @method State   setCode()         Sets the current record's "code" value
 * @method State   setCountryCode()  Sets the current record's "country_code" value
 * @method State   setName()         Sets the current record's "name" value
 * @method State   setCountry()      Sets the current record's "Country" value
 * 
 * @package    emc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseState extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('state');
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'primary' => true,
             'length' => 255,
             ));
        $this->hasColumn('country_code', 'string', 255, array(
             'type' => 'string',
             'primary' => true,
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_code',
             'foreign' => 'code',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}