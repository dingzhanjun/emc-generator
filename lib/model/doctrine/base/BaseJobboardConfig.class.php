<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('JobboardConfig', 'doctrine');

/**
 * BaseJobboardConfig
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property Jobboard $Jobboard
 * 
 * @method integer        getId()       Returns the current record's "id" value
 * @method string         getUsername() Returns the current record's "username" value
 * @method string         getPassword() Returns the current record's "password" value
 * @method Jobboard       getJobboard() Returns the current record's "Jobboard" value
 * @method JobboardConfig setId()       Sets the current record's "id" value
 * @method JobboardConfig setUsername() Sets the current record's "username" value
 * @method JobboardConfig setPassword() Sets the current record's "password" value
 * @method JobboardConfig setJobboard() Sets the current record's "Jobboard" value
 * 
 * @package    emc
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseJobboardConfig extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('jobboard_config');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Jobboard', array(
             'local' => 'id',
             'foreign' => 'config_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}